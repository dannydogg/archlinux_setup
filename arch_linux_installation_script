#!/bin/bash
# Arch Linux Installation Script

# Welcome to the Arch Linux Installation Script
echo "Welcome to the Arch Linux Installation Script!"
sleep 1

####################################################################################################

# OPTIONAL
# Set keyboard layout to German Latin with umlauts
echo "DEBUG: Set keyboard layout to German Latin with umlauts"
sleep 1
loadkeys de-latin1
sleep 1

####################################################################################################

### NETWORK ###
echo "DEBUG: NETWORK"
sleep 1

# OPTIONAL
# Search for network devices (handled by kernel)
# Ethernet
#lspci -k | grep Ethernet
# Wireless
#lspci -k | grep Wireless

## Network connectivity check (tbd)
echo "DEBUG: Network connectivity check (tbd)"
sleep 1
# ...
echo "DEGUG: ..."
sleep 1
echo "DEBUG: Assuming your network connection is established"
sleep 1

# Enable network time protocol (for the installation timestamps and to avoid any certificate errors)
echo "DEBUG: Enable network time protocol (for the installation timestamps and to avoid any certificate errors)"
sleep 1
timedatectl set-ntp true
sleep 1

# Check network time protocol status
echo "DEBUG: Check network time protocol status"
sleep 1
timedatectl status
sleep 1

####################################################################################################

### DISK & PARTITION MANAGEMENT ###
echo "DEBUG: DISK & PARTITION MANAGEMENT"

# Show all block devices
echo "DEBUG: Show all block devices"
sleep 1
blkid
sleep 1

# Count of all found block devices/partitions
echo "DEBUG: Count of all found block devices/partitions"
sleep 1
blkid | awk -F ":" '{print $1}' | wc --lines
sleep 1

# Determination of primary drive (use hda, sda, vda or nvme0n1)
echo "DEBUG: Determination of primary drive (use hda, sda, vda or nvme0n1) (tbd)"
sleep 1

# Select a drive from block devices
echo "DEBUG: Select a drive from block devices"
read -p "Enter drive in lower case letters:" DRIVE

# Show current partition table of selected drive
echo "DEBUG: Show current partition table of selected drive: $DRIVE"
sleep 1

# Clear GPT partition table
echo "DEBUG: Clear GPT partition table"
sleep 1
sfdisk --delete /dev/$DRIVE

# Create GPT partition table
echo "DEBUG: Create GPT partition table"
sleep 1
echo 'label: gpt' | sfdisk /dev/$DRIVE

# Create partitions from script (non-interactice)
# Source: https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks/
# Source: https://www.thegeekstuff.com/2017/05/sfdisk-examples/
# Source: https://linuxhint.com/sfdisk-tutorials/
echo "DEBUG: Create partitions from script (non-interactice)"
sleep 1
echo "DEBUG: Partition 1: 512MiB EFI System Partition (ESP)"
sleep 1
echo "DEBUG: Partition 1: 2GiB Swap Partition"
sleep 1
echo "DEBUG: Partition 1: Remaining space Linux Partition"
sleep 1
echo "DEBUG: Writing changes..."
sleep 1
sfdisk /dev/$DRIVE <<EOF
 , 512M, U
 , 2G,   S
 , , L
write;
EOF
sleep 1

# Create FAT32 filesystem on first partition
# Source: https://wiki.archlinux.org/title/EFI_system_partition#Format_the_partition
echo "DEBUG: Create FAT filesystem (FAT size 32) on first partition"
sleep 1
mkfs.fat -F 32 /dev/"$DRIVE"1 -n ARCH -v
sleep 1

# Create swap filesystem on second partition
echo "DEBUG: Create swap filesystem on second partition"
sleep 1
mkswap /dev/"$DRIVE"2 --label LINUXSWAP --verbose
sleep 1

# Create Linux EXT4 filesystem on third partitiond
echo "DEBUG: Create Linux EXT4 filesystem on third partition"
sleep 1
mkfs.ext4 /dev/"$DRIVE"3 -L ARCHLINUX -v
sleep 1

# Mount EXT4 filesystem under directory mnt
echo "DEBUG: Mount EXT4 filesystem under directory mnt"
sleep 1
mount /dev/"$DRIVE"3 /mnt --verbose
sleep 1

# Create boot directory under mounted EXT4 partition
echo "DEBUG: Create boot directory under mounted EXT4 partition"
sleep 1
mkdir /mnt/boot --verbose
sleep 1

# Mount ESP under under mounted EXT4 partition (/mnt/boot)
echo "DEBUG: Mount ESP under under mounted EXT4 partition"
sleep 1
mount /dev/"$DRIVE"1 /mnt/boot --verbose
sleep 1

################################################################################

### PACKAGE INSTALLATION ###
echo "DEBUG: PACKAGE INSTALLATION"
sleep 1

# Generate Arch Linux repository mirror list (/etc/pacman.d/mirrorlist)
echo "DEBUG: Generate Arch Linux repository mirror list (/etc/pacman.d/mirrorlist)"
sleep 1
reflector --country DE --fastest 5 --ipv4 --protocol https --save /etc/pacman.d/mirrorlist
sleep 1
echo "DEBUG: Check mirrorlist"
sleep 1
cat /etc/pacman.d/mirrorlist
sleep 3

# Update packages on live media
echo "DEBUG: Update packages on live media"
sleep 1
pacman -Syyu --noconfirm
sleep 1

# Install bare minimum packages via pacstrap on mounted partitions
echo "DEBUG: Install bare minimum packages via pacstrap on mounted partitions"
sleep 1
pacstrap /mnt base linux linux-firmware
sleep 1

# Install additional packages (development, editors, bootloader, network service)
echo "DEBUG: Install additional packages (development, editors, bootloader, network service, SSH server)"
sleep 1
pacstrap /mnt base-devel linux-headers vi vim nano git networkmanager bash-completion openssh refind
sleep 1

# Generate filesystem table of /mnt on mounted EXT4 partition
# Prefered source identifiers: UUID
echo "DEBUG: Generate filesystem table of /mnt on mounted EXT4 partition"
sleep 1
echo "DEBUG: Prefered source identifiers: UUID"
sleep 1
genfstab -t UUID /mnt
sleep 3
echo "DEBUG: Writing to /etc/fstab in mounted partition"
sleep 1
genfstab -t UUID /mnt >> /mnt/etc/fstab
sleep 1
echo "DEBUG: Check fstab"
sleep 1
cat /etc/fstab
sleep 3

################################################################################

### SYSTEM CONFIGURATION ###
echo "DEBUG: SYSTEM CONFIGURATION"

# Enable network time protocol (for the installed system)
echo "DEBUG: Enable network time protocol (for the installed system)"
sleep 1
arch-chroot /mnt timedatectl set-ntp true
sleep 1

# Enable local real time clock (for the installed system)
echo "DEBUG: Enable local real time clock (for the installed system)"
sleep 1
arch-chroot /mnt timedatectl set-local-rtc 1
sleep 1

# Check NTP status
echo "DEBUG: Check NTP status"
sleep 1
arch-chroot /mnt timedatectl status
sleep 3

# Set variables
echo "DEBUG: Set variables"
sleep 1

REGION="Europe"
echo "DEBUG: REGION = $REGION"
sleep 1

CITY="Berlin"
echo "DEBUG: CITY = $CITY"
sleep 1

LOCALISATION="de_DE.UTF-8 UTF-8"
echo "DEBUG: LOCALISATION = $LOCALISATION"
sleep 1

HOSTNAME_CUSTOM="ARCHLINUXVM"
echo "DEBUG: HOSTNAME_CUSTOM = $HOSTNAME_CUSTOM"
sleep 1

NEW_USER_NAME="archuser"
echo "DEBUG: NEW_USER_NAME = $NEW_USER_NAME"
sleep 1

ARCH_ISO_LABEL=$(blkid /dev/sr0 | awk --field-separator '"' '{print $6}')
echo "DEBUG: ARCH_ISO_LABEL = $ARCH_ISO_LABEL"
sleep 1

UUID=$(blkid /dev/sda3 | awk --field-separator '"' '{print $2}')
echo "DEBUG: UUID = $UUID"
sleep 2

# Set region and time zone
echo "DEBUG: Set region and time zone"
sleep 1
ln /mnt/usr/share/zoneinfo/$REGION/$CITY /mnt/etc/localtime --symbolic --force --verbose
sleep 1
ls /mnt/etc/localtime -l

# Set the time clocks utility
echo "DEBUG: Set the time clocks utility"
sleep 1
arch-chroot /mnt hwclock --systohc --update-drift --verbose
sleep 1

# Set the locale and charset
echo "DEBUG: Set the locale and charset"
sleep 1
echo $LOCALISATION >> /mnt/etc/locale.gen
cat /mnt/etc/locale.gen
sleep 1

# Generate localisation files from templates
echo "DEBUG: Generate localisation files from templates"
sleep 1
arch-chroot /mnt locale-gen
sleep 1

# Set sysetm-wide language and region parameters
echo "DEBUG: Set sysetm-wide language and region parameters"
sleep 1
touch /mnt/etc/locale.conf
echo "# /etc/locale.conf - system-wide language and region configuration" >> /mnt/etc/locale.conf
sleep 1
echo "LANG=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LANGUAGE=de_DE" >> /mnt/etc/locale.conf
sleep 1
echo "LC_CTYPE=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_NUMERIC=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_TIME=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_COLLATE=C" >> /mnt/etc/locale.conf
sleep 1
echo "LC_MONETARY=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_MESSAGES=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_PAPER=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_NAME=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_ADDRESS=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_TELEPHONE=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_MEASUREMENT=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "LC_IDENTIFICATION=de_DE.UTF-8" >> /mnt/etc/locale.conf
sleep 1
echo "#LC_ALL=" >> /mnt/etc/locale.conf
sleep 1
cat /mnt/etc/locale.conf
sleep 3

# Set the configuration file for the virtual console
echo "DEBUG: Set the configuration file for the virtual console"
sleep 1
touch /mnt/etc/vconsole.conf
echo "# /etc/vconsole.conf - key mapping and console font" >> /mnt/etc/vconsole.conf
sleep 1
echo "KEYMAP=de-latin1" >> /mnt/etc/vconsole.conf
sleep 1
echo "KEYMAP_TOGGLE=en_US" >> /mnt/etc/vconsole.conf
sleep 1
echo "FONT=eurlatgr" >> /mnt/etc/vconsole.conf
sleep 1
echo "FONT_MAP=" >> /mnt/etc/vconsole.conf
sleep 1
echo "FONT_UNIMAP=" >> /mnt/etc/vconsole.conf
sleep 1
echo "vconsole.keymap=" >> /mnt/etc/vconsole.conf
sleep 1
echo "vconsole.keymap_toggle=" >> /mnt/etc/vconsole.conf
sleep 1
echo "vconsole.font=" >> /mnt/etc/vconsole.conf
sleep 1
echo "vconsole.font_map=" >> /mnt/etc/vconsole.conf
sleep 1
echo "vconsole.font_unimap=" >> /mnt/etc/vconsole.conf
sleep 1
cat /mnt/etc/vconsole.conf
sleep 3

# Set a userdefined hostname
echo "DEBUG: Set a userdefined hostname"
sleep 1
touch /mnt/etc/hostname
sleep 1
#echo $HOSTNAME >> /etc/hostname
echo $HOSTNAME_CUSTOM >> /mnt/etc/hostname
cat /mnt/etc/hostname
sleep 3

####################################################################################################

### USER MANAGEMENT ###
echo "DEBUG: USER MANAGEMENT"

# Set a default password for the root user
echo "DEBUG: Set a default password for the root user"
sleep 1
echo "DEBUG: Enter a strong and secure password:"
echo ""
arch-chroot /mnt passwd
sleep 1

# Add a new user
echo "DEBUG: Add a new user with username: $NEW_USER_NAME"
sleep 1
arch-chroot /mnt useradd --create-home $NEW_USER_NAME
sleep 1

# Set a default password for the new user
echo "DEBUG: Set a default password for the new user"
sleep 1
echo "DEBUG: Enter a strong and secure password:"
echo ""
arch-chroot /mnt passwd $NEW_USER_NAME
sleep 1

# Grant superuser previliges to the new user
echo "DEBUG: Grant superuser previliges to the new user"
sleep 1
arch-chroot /mnt usermod -aG wheel $NEW_USER_NAME
sleep 1

# Change the visudo configuration (sed, Stream EDitor)
echo "DEBUG: Change the visudo configuration"
sleep 1
sed 's+# %wheel ALL=(ALL) ALL+%wheel ALL=(ALL) ALL+g' /mnt/etc/sudoers --in-place
cat /mnt/etc/sudoers
sleep 3

####################################################################################################

### BOOTLOADER ###
echo "DEBUG: BOOTLOADER"

# Generate rEFInd configuration
echo "DEBUG: Generate rEFInd configuration"
sleep 1
arch-chroot /mnt refind-install
echo "DEBUG: Check rEFInd configuration"
sleep 1
cat /mnt/boot/refind_linux.conf
sleep 3

# Fix the generated rEFInd config
echo "DEBUG: Fix the generated rEFInd config"
sleep 1
sed "s+archisobasedir=arch archisolabel=$ARCH_ISO_LABEL+root=UUID=$UUID rw+g" /mnt/boot/refind-linux.conf --in-place
echo "DEBUG: Check rEFInd configuration"
sleep 1
cat /mnt/boot/refind-linux.conf
sleep 3

####################################################################################################

### SERVICES ###
echo "DEBUG: SERVICES"
sleep 1

# Enable NetworkManager service
echo "DEBUG: Enable NetworkManager service"
sleep 1
arch-chroot /mnt systemctl enable NetworkManager.service
sleep 1
ls -l /mnt/etc/systemd/system/multi-user.target.wants/NetworkManager.service
sleep 1
ls -l /mnt/etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service
sleep 1
ls -l /mnt/etc/systemd/system/network-online.target.wants/NetworkManager-wait-online.service
sleep 1

# Enable OpenSSH service
echo "DEBUG: Enable OpenSSH service"
sleep 1
arch-chroot /mnt systemctl enable sshd.service
sleep 1

####################################################################################################

### FINALIZE INSTALLATION ###
echo "DEBUG: FINALIZE INSTALLATION"
sleep 1

# Synchronize filesystems
echo "DEBUG: Synchronize filesystems"
sleep 1
sync
sleep 1

# Swap off swap partition
echo "DEBUG: Swap off swap partition"
sleep 1
swapoff /dev/"$DRIVE"2
sleep 1

# Unmount root and boot partition (recursive)
echo "DEBUG: Unmount root and boot partition (recursive)"
sleep 1
umount /mnt --recursive --verbose
sleep 1

echo "Installation is finished! You can reboot now!"
